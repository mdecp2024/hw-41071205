<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式 :D</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: fqpabi8</p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41071205">https://github.com/mdecp2024/hw-41071205</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41071205/">https://mdecp2024.github.io/hw-41071205/</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<p><span>國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目一: 41071205</span></p>
<p><span></span></p>
<p><span><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/k6ijSJNp1Mg?si=rBaujG2T8o4pD4pK" title="YouTube video player" width="560"></iframe></span></p>
<p><span>國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目二: 41071205</span></p>
<p>變數名是區分大小寫的（<code>a</code> 和 <code>A</code> 是不同的變數）。</p>
<p>不能使用 Python 的保留字（如 <code>if</code>, <code>else</code>, <code>True</code> 等）作為變數名，也不能使用特殊符號</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/WRY8isocCVI?si=lfYtqp4M_RFdJx29" title="YouTube video player" width="560"></iframe></p>
<p><span>國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目三: 41071205</span></p>
<p><span></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/jO01btzCEE0?si=LvmfkrgS0J02ILUF" title="YouTube video player" width="560"></iframe></p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/tgDiGD6u8m8?si=hTZXpQIuBCP-WfMr" title="YouTube video player" width="560"></iframe></p>
<h3>w10</h3>
<p><span>國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目一: 41071205</span></p>
<p><span></span></p>
<p><span><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/k6ijSJNp1Mg?si=rBaujG2T8o4pD4pK" title="YouTube video player" width="560"></iframe></span></p>
<p><span>國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目二: 41071205</span></p>
<p>變數名是區分大小寫的（<code>a</code> 和 <code>A</code> 是不同的變數）。</p>
<p>不能使用 Python 的保留字（如 <code>if</code>, <code>else</code>, <code>True</code> 等）作為變數名，也不能使用特殊符號</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/WRY8isocCVI?si=lfYtqp4M_RFdJx29" title="YouTube video player" width="560"></iframe></p>
<p><span>國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目三: 41071205</span></p>
<p><span>第一題：利用物理公式求加速度，將數字以變數表示，帶入公式，求出結果。 </span></p>
<p><span>第二題：因用到較為高階的數學式，需要將數學程式編入進來，以使用語言，最後得到結果。</span></p>
<p><span></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/jO01btzCEE0?si=LvmfkrgS0J02ILUF" title="YouTube video player" width="560"></iframe></p>
<h2>w11_hw</h2>
<p><a href="/downloads/gistfile4.txt">/downloads/gistfile4.txt</a></p>
<p><a href="/downloads/gistfile3.txt">/downloads/gistfile3.txt</a></p>
<p><a href="/downloads/gistfile2.txt">/downloads/gistfile2.txt</a></p>
<p><a href="/downloads/gistfile1.txt">/downloads/gistfile1.txt</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://mdecp2024.github.io/hw-41071205/downloads/gistfile3.txt">題目一</a></p>
<p><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_circle</span>(<span class="hljs-params">radius</span>): //定義了一個名為 <code>print_circle</code> 的函數，接受一個參數 <code>radius</code>，表示圓的半徑。</p>
<p>diameter = <span class="hljs-number">2</span> * radius //圓的直徑等於半徑的兩倍。這個值用於確定繪圖的範圍。</p>
<p><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(diameter + <span class="hljs-number">1</span>): <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(diameter + <span class="hljs-number">1</span>): //使用兩個巢狀迴圈分別遍歷畫布中的每個點 <code>(x, y)，</code>外層迴圈控制垂直方向 (<code>y</code>)，內層迴圈控制水平方向 (<code>x</code>)，<code>range(diameter + 1)</code> 的範圍確保迴圈涵蓋直徑的所有點，外加一個點的範圍（因為範圍是從 0 開始的）。</p>
<p><span class="hljs-keyword">if</span> (x - radius)**<span class="hljs-number">2</span> + (y - radius)**<span class="hljs-number">2</span> &lt;= radius**<span class="hljs-number">2</span>:</p>
<ul>
<li>
<p>使用圓的標準方程式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>h</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mi>k</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>=</mo><msup><mi>r</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">(x - h)^2 + (y - k)^2 = r^2</annotation></semantics></math></span><span aria-hidden="true" class="katex-html"><span class="base"><span class="strut"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace"></span><span class="mbin">−</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord mathnormal">h</span><span class="mclose">)<span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span><span class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace"></span><span class="mbin">+</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">(</span><span class="mord mathnormal">y</span><span class="mspace"></span><span class="mbin">−</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord mathnormal">k</span><span class="mclose">)<span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span><span class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathnormal">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span><span class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，判斷點 <code>(x, y)</code> 是否位於以 <code>(radius, radius)</code> 為圓心，半徑為 <code>radius</code> 的圓內。</p>
這裡的 <code>(radius, radius)</code> 是圓心坐標，因為畫布以左上角 <code>(0, 0)</code> 為原點，圓心需要偏移到畫布中央。如果該點在圓內或圓上（小於等於半徑的平方），則執行下一步。</li>
</ul>
<p><span class="hljs-built_in">print</span>(<span class="hljs-string">'*'</span>, end=<span class="hljs-string">''</span>) //如果點位於圓內，輸出星號 (<code>*</code>)，<code>end=''</code> 表示輸出的星號後不換行，使圖形在一行中連續繪製。</p>
<p><span class="hljs-built_in">print</span>(<span class="hljs-string">' '</span>, end=<span class="hljs-string">''</span>) //如果點不在圓內，輸出空格 (<code> </code>)來填充空白區域。</p>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">
<div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre hljs language-python">print_circle(<span class="hljs-number">20</span>) //</code>呼叫 <code>print_circle</code> 函數，並將半徑設為 20。</div>
</div>
<p></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://mdecp2024.github.io/hw-41071205/downloads/gistfile1.txt">題目二</a></p>
<ul>
<li>建立了一個 HTML 畫布 (<code>canvas</code>)。</li>
<li>定義了兩個函數：
<ul>
<li>一個用於繪製單個像素（小方格）。</li>
<li>一個用於繪製填滿的圓形（利用點陣演算法）。</li>
</ul>
</li>
<li>使用中點演算法（Midpoint Circle Algorithm）來繪製點陣圓形。</li>
<li>最後，顯示網格背景和填滿的圓形。</li>
</ul>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/7ij_04YjwDc?si=QyZaTvzKidieK3Ta" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://mdecp2024.github.io/hw-41071205/downloads/gistfile2.txt">上課作業</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://mdecp2024.github.io/hw-41071205/downloads/gistfile4.txt">上課作業二</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">n = 11
space = '_'
center = n // 2
#print(center)
for y in range(n):
    for x in range(n):
        print("(", x, ", ", y, ")",sep="")</pre>
<p></p>
<p><br/><br/></p>
<h2>w12_hw</h2>
<p>一開始Jupyter跟Python不同的地方在於字串程式的呈現，Python需要Print指令才能將字串輸出在視窗上。input()指令功能：顯示提示文字，並等待用戶輸入。Print()是輸出字串，兩程式的呈現的部分會有不同，可能是brython輸出視窗的關係導致。再來是將右邊的字串丟給左邊的變數，print()時使用變數名稱，不必加雙冒號，即可輸出字串。靈活使用以上程式，利用input()輸入字串，再來用print()將字串輸出得到最後的結果。</p>
<p>利用if…else…，利用變數決定字串的範圍，再用input()輸入字串，if我們想要的書有在範圍中，print(有，我們有賣)，else輸出(不，我們沒有賣)。</p>
<p>利用input()、.append()以及.remove()輸入想加入或移除的字串，if物品重複，輸出(已經在購物清單中)，else加入新物品，if要移除清單中的物品，print(移除物品)，else輸出(此物品沒有在清單中)。</p>
<p>index() 方法用於查找某個元素的索引值。如果元素不存在，通常會拋出異常。.pop()從列表中移除並返回指定位置的元素，<span>.insert()</span>在指定位置加入新的元素。</p>
<p>正向索引：從 0 開始。負向索引：從 -1 開始（倒數第一個元素）。反轉列表：使用 [:: -1]。單個索引（如 senses[1]）可以直接修改特定位置的元素。</p>
<p>+ 運算子：用於將兩個列表拼接成一個新列表。切片操作：用於從清單中提取部分元素，並結合 + 實現插入或合併。del 的作用：刪除清單中的某個元素或切片。刪除整個物件，使其從記憶體中移除。一旦使用 del 刪除了整個物件，再次訪問該物件會引發錯誤。</p>
<p>friends = ["Geetha", "Luca", "Daisy", "Juhan"]</p>
<p>創建包含朋友名字的列表。</p>
<p>dishes = ["sushi", "burgers", "tacos", "pizza"]</p>
<p>創建包含菜肴名稱的列表。</p>
<p>print("My friends' names are:")</p>
<p>列印一條說明。</p>
<p>print(friends)</p>
<p>輸出整個 friends 列表：</p>
<p>for index in range(0, 4):</p>
<p>外層迴圈，遍歷索引 0 到 3，對應每個朋友的名字。</p>
<p>print("index: " + str(index))</p>
<p>列印當前索引。</p>
<p>print("friend: " + friends[index])</p>
<p>列印當前索引對應的朋友名字。</p>
<p>print("Their favorite dishes are:")</p>
<p>列印說明，表示即將列出菜肴列表。</p>
<p>print(dishes)</p>
<p>輸出整個 dishes 列表：</p>
<p>內層迴圈 1：for index in range(0, 4):</p>
<p>遍歷菜肴清單中的每個索引。</p>
<p>print("index: " + str(index))</p>
<p>列印當前索引。</p>
<p>print("dish: " + dishes[index])</p>
<p>列印當前索引對應的菜肴名稱。</p>
<p>內層迴圈 2：for index in range(0, 4):</p>
<p>將朋友和對應菜肴匹配，按索引列印每個人最喜歡的菜。</p>
<p>print("My friend " + friends[index] + "'s favorite dish is " + dishes[index])</p>
<p>列印格式化字串，顯示朋友名字及其最喜歡的菜肴。</p>
<p>for i in range(0, len(animals)):</p>
<p>這行代碼使用 for 迴圈遍歷清單中的每個元素。</p>
<p>range(0, len(animals)) 生成一個從 0 到 len(animals)（即 3）的整數序列，表示清單的索引。</p>
<p>len(animals) 返回列表的長度（3），所以 range(0, 3) 就會生成 [0, 1, 2]，即迴圈會執行三次，分別訪問索引為 0、1 和 2 的元素。</p>
<p>i 是當前迴圈的索引，表示當前訪問的是清單中的第幾個元素。</p>
<p>代碼通過一個 <span>for</span> 迴圈遍歷動物列表，並在每個位置列印動物的名稱和其位置。</p>
<p><span> </span></p>
<p>列出清單內容與元素位置</p>
<p><span>print(accessories)</span></p>
<p><span>for i in range(len(accessories)):</span></p>
<p><span>    print("The element " + accessories[i] + " is in position " + str(i))</span></p>
<p>功能：</p>
<p>輸出整個清單內容。</p>
<p>逐一列出每個元素的名稱以及它在清單中的位置。</p>
<p>輸出：</p>
<p><span>['belt', 'hat', 'gloves', 'sunglasses', 'ring']</span></p>
<p><span>The element belt is in position 0</span></p>
<p><span>The element hat is in position 1</span></p>
<p><span>The element gloves is in position 2</span></p>
<p><span>The element sunglasses is in position 3</span></p>
<p><span>The element ring is in position 4</span></p>
<ol start="2">
<li><span> </span>檢查元素長度是否為<span> 6</span></li>
</ol>
<p><span>for i in range(len(accessories)):</span></p>
<p><span>    if len(accessories[i]) == 6:</span></p>
<p><span>        print("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")</span></p>
<p>功能：</p>
<p>找出長度正好為<span> 6 </span>的元素，並列出其名稱與位置。</p>
<p><span>The element gloves is in position 2 and it has 6 characters</span></p>
<ol start="3">
<li><span> </span>檢查元素長度是否小於<span> 6</span></li>
</ol>
<p><span>for i in range(len(accessories)):</span></p>
<p><span>    if len(accessories[i]) &lt; 6:</span></p>
<p><span>        print("The element " + accessories[i] + " is in position " + str(i) + " and it has less than 6 characters")</span></p>
<p>功能：</p>
<p>找出長度小於<span> 6 </span>的元素，並列出其名稱與位置。</p>
<p><span>The element belt is in position 0 and it has less than 6 characters</span></p>
<p><span>The element hat is in position 1 and it has less than 6 characters</span></p>
<p><span>The element ring is in position 4 and it has less than 6 characters</span></p>
<ol start="4">
<li><span> </span>檢查元素長度是否大於<span> 6</span></li>
</ol>
<p><span>n_of_characters = 6</span></p>
<p><span>for i in range(len(accessories)):</span></p>
<p><span>    if len(accessories[i]) &gt; n_of_characters:</span></p>
<p><span>        print("The element " + accessories[i] + " is in position " + str(i) + " and it has more than " + str(n_of_characters) + " characters")</span></p>
<p>功能：</p>
<p>找出長度大於<span> 6 </span>的元素，並列出其名稱與位置。</p>
<p><span>The element sunglasses is in position 3 and it has more than 6 characters</span></p>
<ol start="5">
<li><span> </span>檢查元素長度是否不等於<span> 6</span></li>
</ol>
<p><span>for i in range(len(accessories)):</span></p>
<p><span>    if len(accessories[i]) != n_of_characters:</span></p>
<p><span>        print("The element " + accessories[i] + " is in position " + str(i) + " and it has a number of characters different from " + str(n_of_characters))</span></p>
<p>功能：</p>
<p>找出長度不等於<span> 6 </span>的元素，並列出其名稱與位置。</p>
<p><span>The element belt is in position 0 and it has a number of characters different from 6</span></p>
<p><span>The element hat is in position 1 and it has a number of characters different from 6</span></p>
<p><span>The element sunglasses is in position 3 and it has a number of characters different from 6</span></p>
<p><span>The element ring is in position 4 and it has a number of characters different from 6</span></p>
<ol start="6">
<li><span> </span>檢查位置是否小於或等於<span> 2</span></li>
</ol>
<p><span>position = 2</span></p>
<p><span>for i in range(len(accessories)):</span></p>
<p><span>    if i &lt;= position:</span></p>
<p><span>        print("The element " + accessories[i] + " is in position " + str(i) + ", which is less than or equal to " + str(position))</span></p>
<p>功能：</p>
<p>找出位置小於或等於<span> 2 </span>的元素，並列出其名稱與位置。</p>
<p>輸出：</p>
<p><span>The element belt is in position 0, which is less than or equal to 2</span></p>
<p><span>The element hat is in position 1, which is less than or equal to 2</span></p>
<p><span>The element gloves is in position 2, which is less than or equal to 2</span></p>
<ol start="7">
<li><span> </span>檢查位置是否大於或等於<span> 2</span></li>
</ol>
<p><span>for i in range(len(accessories)):</span></p>
<p><span>    if i &gt;= position:</span></p>
<p><span>        print("The element " + accessories[i] + " is in position " + str(i) + ", which is at least " + str(position))</span></p>
<p>功能：</p>
<p>找出位置大於或等於<span> 2 </span>的元素，並列出其名稱與位置。</p>
<p>輸出：</p>
<p><span>The element gloves is in position 2, which is at least 2</span></p>
<p><span>The element sunglasses is in position 3, which is at least 2</span></p>
<p><span>The element ring is in position 4, which is at least 2</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/uyLBZ5sNkps?si=uA6XhVrRlAcHEscd" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/yKOnhXCX59U?si=Kq5laSuiEPtVeyA4" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/3f93720f8f48e4e9936cb6ee9eb8894e/raw/a98a5caed40c1217379fd3185ddbe60299106db4/string">Strings</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/af6189333b9e92f4223496d65fcc5321/raw/6d33ce47209a39694e5ed450cd524499557d0ba7/input()">input()</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/00c3448c5cb7736f045760674bf4b905/raw/c72a48b9b4e3ef6b7d4bfe5b7363f8efa9cb46fb/print()">print()</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/81691096b9cad52c8d17bce0333e839a/raw/24d95baa33d4c7cf2b2499b3ebe835313f3de806/organizing">Organizing</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/a391ebb07b8726f27bda1faf20cf4b69/raw/fd6e361962932de4a907ea84d0861eb5106855fd/favorites">favorites</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/843f00183762c8fae77e8af4b8b2acbb/raw/f00c5d94897d90a2ffd3726d1ca3db1431f93918/if....in...%2520else...">if...in.../else...</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/2b5f6c85bd3e71416666dcd6fc49a26a/raw/124c9c07e383840f5e8aced01daebe41790ae200/append()%2520and%2520remove()">append() and remove()</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/2a7fa7c1900497f51ee184b87e2146b6/raw/d1bc823cdd07feac1afa0bd36228305935502d02/.index(),%2520.pop()%2520and%2520.insert()">.index() , .pop() and .insert()</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/4f9a72b6e0fd8239df070f5aa1d73c11/raw/a63487f7297c0c3c9a6fc977cbd1ede6ed7619d8/list%2520slicing">List slicing</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/68b79603c8d51308afa9ce61fc0e50ef/raw/92a7a7ed66057e5c26a8af97453da31a90df2fc7/list%2520slicing%2520Senses">List slicing senses</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/271b6309d264ea94c63d08aa6626ff32/raw/8631409ef7de024ec785109e872876fb580f13c5/list%2520slicing%2520planets">List slicing planets</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/f1a50af61ff12a67f9b623d588e10eaa/raw/0a2d54ea1fe7a17ad1b8d5a72174c9a63e3f750c/list%2520slicing%2520del">List slicing del</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/c22fdc603bbc0e315b7e5bae464def1c/raw/8a634e01415981820b8743524a8bcc5e79ffa204/for...in%2520range()">for...in range()</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/4f1174e32917bab1b95876b586561c58/raw/240c4947b10834f2ba9de740da8c0cc6c26e45ca/for%2520loop%2520with%2520if...==,%2520else">for loop with if...==.../else</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/63e4de959e0d426d008216157652f80a/raw/71a6965d9aa398f17a644adb8e73599e0a00f346/for%2520loop%2520for%2520searching">For loop for searching</a></p>
<h2>w13</h2>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/13356b1ad1556fbc7169c624284ce88f/raw/c823a4d77a70ffca88eabff86bc554df80f65517/rectangle*2">rectangle</a></p>
<p></p>
<p></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 繪製兩個矩形
ctx.strokeStyle = 'red'  # 設定矩形顏色為紅色
ctx.beginPath() 
ctx.rect(10, 10, 200, 200)
ctx.rect(110, 110, 200, 200)
ctx.stroke()

# 繪製對角線，顏色設定為藍色
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath() 
ctx.moveTo(10, 10)
ctx.lineTo(210, 210)
ctx.stroke()
</script>
</p>
<h3>w13_ai</h3>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/a961b39ffeba9af1904277ff5b1ed8e6/raw/2e87636875edbe40350ae9db6f891cfb5a90018e/shape%2520combination">shape combination</a></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

# 获取绘图上下文 (2D)
ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 繪製紅色矩形
ctx.strokeStyle = 'red'  # 設定矩形顏色為紅色
ctx.beginPath()
x1, y1, side_length1 = 50, 50, 200  # 第一個矩形的左上角坐標和邊長
ctx.rect(x1, y1, side_length1, side_length1)
x2, y2, side_length1 = 150, 150, 200
ctx.rect(x2, y2, side_length1, side_length1)# 繪製紅色方形
ctx.stroke()

# 繪製對角線，顏色設定為藍色
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath()
ctx.moveTo(x1, y1)
ctx.lineTo(x1 + side_length1, y1 + side_length1)
ctx.stroke()

# 外接圓形，圓心與方形中心對齊，半徑等於方形的對角線的一半
radius1 = side_length1 * math.sqrt(2) / 2  # 圓形半徑等於方形對角線的一半
cx1, cy1 = x1 + side_length1 / 2, y1 + side_length1 / 2  # 圓心坐標
radius2 = side_length1 * math.sqrt(2) / 2  # 圓形半徑等於方形對角線的一半
cx2, cy2 = x2 + side_length1 / 2, y2 + side_length1 / 2

# 繪製外接圓形
ctx.strokeStyle = 'black'  # 設定圓形顏色
ctx.beginPath()
ctx.arc(cx1, cy1, radius1, 0, 2 * math.pi)  # 以方形中心為圓心，半徑為radius1
ctx.stroke()
ctx.beginPath()
ctx.arc(cx2, cy2, radius2, 0, 2 * math.pi)  # 以方形中心為圓心，半徑為radius1
ctx.stroke()
</script>
</p>
<h3>w13_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/953809cf098c7404371e8dd9f8b9d9bd/raw/fee3a378fdb737f9f6d4cbff80cf340bb0ac8365/color">add color</a></p>
<div id="brython_div1">
<p>這段程式碼主要利用 HTML5 的 Canvas 進行視覺化繪圖，並通過幾何運算和區域判斷來標示不同區域的顏色。以下是該程式的主要邏輯：</p>
<ol>
<li><strong>建立畫布</strong><strong> (Canvas)</strong>：</li>
<ul>
<li>設定了一個 600x600 的 Canvas 元素，並將其加入到 HTML 中。</li>
</ul>
<li><strong>繪製幾何圖形</strong>：</li>
<ul>
<li>繪製了兩個紅色邊框的正方形。</li>
<li>在這兩個正方形內繪製了對角線 (藍色)。</li>
<li>繪製了兩個圓形 (黑色)，其半徑設為 141.4（約等於正方形對角線的一半）。</li>
</ul>
<li><strong>判斷點的位置</strong>：</li>
<ul>
<li>利用數學公式和幾何規則，判斷點是否位於以下位置：</li>
<ul>
<li>圓內部</li>
<li>正方形內部或外部</li>
<li>線段上、線段上方或下方</li>
<li>正方形的上下左右</li>
</ul>
</ul>
<li><strong>區域著色邏輯</strong>：</li>
<ul>
<li>根據點所屬的幾何區域，為其設定不同的顏色。例如：</li>
<ul>
<li>在第一個圓內且位於正方形內部且對角線上方，著色為綠色。</li>
<li>位於第一個圓內且正方形上方，著色為青色。</li>
<li>第二個圓內但不在正方形內，根據方位著色為不同的淺色。</li>
</ul>
</ul>
<li><strong>掃描並繪製</strong>：</li>
<ul>
<li>按像素掃描畫布中的每個點，通過 get_region_color 函式獲取該點的顏色，並在畫布上進行著色。</li>
<li>每個像素被繪製為小圓點以顯示對應的顏色。</li>
</ul>
<li>
<p><strong>多層區域劃分</strong>：</p>
<ul>
<li>將圓與正方形的交集進一步細化，區分不同組合的區域。</li>
<li>利用列表 <code>regions</code> 收集點的屬性，避免多重嵌套。</li>
</ul>
</li>
<li>
<p><strong>顏色填充</strong>：</p>
<ul>
<li>每個區域設定了不同顏色，例如 <code>gray</code> 表示兩正方形內部的交集，<code>purple</code> 表示兩圓的交集但不在正方形內。</li>
</ul>
</li>
<li>
<p><strong>像素填充優化</strong>：</p>
<ul>
<li>使用 <code>fillRect</code> 填充像素代替繪製小圓點，提升性能。</li>
</ul>
</li>
</ol>
</div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 設置畫布
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 畫兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.rect(200, 200, 200, 200)
ctx.stroke()

# 畫對角線 (藍色)
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫兩個圓形 (黑色)
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)
ctx.stroke()

# 判斷點的位置
def point_in_circle1(x, y):
    cx, cy, r = 200, 200, 141.4
    return (x - cx) ** 2 + (y - cy) ** 2 < r ** 2

def point_in_circle2(x, y):
    cx, cy, r = 300, 300, 141.4
    return (x - cx) ** 2 + (y - cy) ** 2 < r ** 2

def point_in_square1(x, y):
    return 100 <= x <= 300 and 100 <= y <= 300

def point_in_square2(x, y):
    return 200 <= x <= 400 and 200 <= y <= 400

def point_above_line(x, y):
    return y < x

def point_below_line(x, y):
    return y > x

# 取得點所屬區域的函式
def get_region(x, y):
    regions = []
    if point_in_circle1(x, y):
        regions.append("circle1")
    if point_in_circle2(x, y):
        regions.append("circle2")
    if point_in_square1(x, y):
        regions.append("square1")
    if point_in_square2(x, y):
        regions.append("square2")
    if point_above_line(x, y):
        regions.append("above_line")
    if point_below_line(x, y):
        regions.append("below_line")
    return regions

# 根據區域屬性決定顏色
def get_region_color(x, y):
    regions = get_region(x, y)

    # 圓的交集區域
    if "circle1" in regions and "circle2" in regions:
        if "square1" in regions and "square2" in regions:
            return "gray"  # 同時在兩個正方形內
        elif "square1" in regions:
            return "orange"  # 第一正方形內
        elif "square2" in regions:
            return "red"  # 第二正方形內
        else:
            return "purple"  # 僅在圓交集中

    # 第一個圓內的顏色判定
    if "circle1" in regions:
        if "square1" in regions:
            if "above_line" in regions:
                return "blue"  # 第一正方形內且對角線上方
            elif "below_line" in regions:
                return "yellow"  # 第一正方形內且對角線下方
        else:
            return "cyan"  # 第一圓內但不在第一正方形內

    # 第二個圓內的顏色判定
    if "circle2" in regions:
        if "square2" in regions:
            return "green"  # 第二正方形內
        else:
            return "lightblue"  # 第二圓內但不在第二正方形內

    return None  # 不符合條件則不著色

# 繪製掃描點並著色
def scan_and_draw():
    for y in range(0, canvas.height):
        for x in range(0, canvas.width):
            color = get_region_color(x, y)
            if color:
                ctx.fillStyle = color
                ctx.fillRect(x, y, 1, 1)  # 填充單像素方格

# 開始掃描和標示
scan_and_draw()
</script>
</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/i-gMnxEtiAQ?si=yDOZIz5XYP6UTF40" title="YouTube video player" width="560"></iframe></p>
<h3>w14_ex</h3>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/827b5770b329a2ecae2570ae4b53afad/raw/7518150c2194058d5a2c46084b12002739480e40/RGB%2520circle">RGB circles</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/9bc0fa9a6666d37c196d06d92274ee88/raw/f10cdaa3ade5f7f13c1fb4a896c3fde7b7c8d6ba/move%2520RGB%2520circle">move RGB circle</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"></pre>
<h2>w15</h2>
<p>題目一：<a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/00165240b4ccc84bbf65fcba5474f7e2/raw/691da4eda0c20cb2da587230085ae211f6f99c03/gistfile1.txt">從1累加到100</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">total = 0
for i in range(1, 101):  # range(1, 101) 代表從 1 到 100
    total += i #+=增量運算符

# 輸出結果
print(total)</pre>
<p>題目二：<a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/0da72f22242e45741303d8b248c4800a/raw/1f8e080595fe0f99f3c746f21d6c391cf89f48bb/addto()">addto()</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(start, end): #加法或添加列表功能
    total = 0
    for i in range(start, end + 1):  # 從 start 到 end（包括 end）
        total += i
    return total #結果返回給調用

# 調用 addto 函數，計算 1 到 100 的和
result = addto(1, 100)
print(result)</pre>
<p>題目三：<a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/0a69708dc238cb496c9f658e7013d656/raw/4f93cfe5d18970e9c0c59f96e055a7b71131f253/add_only_even()">add_only_even()</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_only_even(start, end):
    total = 0
    for i in range(start, end + 1):
        if i % 2 == 0:  # 判斷 i 是否為偶數
            total += i
    return total

# 調用 add_only_even 函數，計算從 1 到 100 之間所有偶數的和
result = add_only_even(1, 100)</pre>
<p>題目四：<a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/d5e5cf8c42c4235f081221772b844d23/raw/360b669ad4c6c03a6362c9e0b9ed63a3db5e6c8a/add_avoid_8()">add_avoid_8()</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_aviod_8(start, end):
    total = 0
    for i in range(start, end + 1):
        # 如果數字中包含字符 '8'，跳過
        if '8' in str(i):  # 判斷數字中是否包含字符 "8"，str()將數據類型轉為字符串
            continue #用於跳過目前循環的剩餘部分，直接進入下一次循環
        total += i
    return total

# 調用 add_aviod_8 函數，計算從 1 到 100 之間的總和，避开包含數字 "8" 的數字</pre>
<p></p>
<p>心得：利用for迴圈可以將計算式簡化，迅速的決定範圍。addto()可以當加法也可以是添加新字串到列表中，add_only_even()是將奇數以外的數字累加起來，add_only_odd()則相反，add_avoid_8()只要有數字"8"就會避開，不做計算。</p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/bfc319c2fff8e5e28ec5789640e1692e/raw/fc75d489e8c7f2008e52ebcd5db9ccf580eb39e1/draw%2520picture">draw shapes</a></p>
<p></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

canvas = html.CANVAS(width = 2000, height = 2000)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")

ctx.lineWidth = 2
ctx.strokeStyle = "black"
ctx.beginPath(12,5)
ctx.moveTo(12,5)
ctx.lineTo(88,5)
ctx.stroke()

ctx.beginPath(12,5)
ctx.moveTo(12,5)
ctx.lineTo(12,95)
ctx.stroke()

ctx.font = "20px Arial"  # 設定字體
ctx.fillStyle = "black"  # 設定文字顏色

# 在(90, 25)位置添加文字
ctx.fillText("+X", 90,25)

# 在(20, 110)位置添加文字
ctx.fillText("+Y", 20, 110)
ctx.font = "20px Arial"

# 標示原點座標
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText("(12, 5)", 20, 20)

# 位移偏移量
x = 12
y = 5

# 畫橙色六邊形
ctx.beginPath()
ctx.fillStyle = "#EBB000"
ctx.moveTo(x + 40, y + 63)
ctx.lineTo(x + 60, y + 33)
ctx.lineTo(x + 90, y + 33)
ctx.lineTo(x + 110,y + 63)
ctx.lineTo(x + 90, y + 93)
ctx.lineTo(x + 60, y + 93)
ctx.closePath()
ctx.fill()

# 畫綠色菱形
ctx.beginPath()
ctx.fillStyle = "#2CB05F"
ctx.moveTo(x + 130, y + 63)
ctx.lineTo(x + 150, y + 33)
ctx.lineTo(x + 170, y + 63)
ctx.lineTo(x + 150, y + 93)
ctx.closePath()
ctx.fill()

# 藍色三角形 (頂點在菱形右側，方向朝下)
ctx.beginPath()
ctx.fillStyle = "#73B7FF"
ctx.moveTo(x + 174, y + 63)  # 頂點在菱形右側
ctx.lineTo(x + 154, y + 93)  # 左下角
ctx.lineTo(x + 194, y + 93)  # 右下角
ctx.closePath()
ctx.fill()

# 畫粉紅色圓形
ctx.beginPath()
ctx.fillStyle = "#FF458C"
ctx.arc(x + 220, y + 63, 20, 0, 2 * 3.14159)
ctx.fill()

# 畫黃色正方形
ctx.beginPath()
ctx.fillStyle = "#EBDF00"
ctx.rect(x + 260, y + 43, 40, 40)
ctx.fill()

# 畫藍色矩形
ctx.beginPath()
ctx.fillStyle = "#004A99"
ctx.rect(x + 320, y + 53, 60, 20)
ctx.fill()
</script>
</p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p><br/><br/><br/><br/></p>
<h3>W5</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#單行註解
#help(print)
'''這個三引號所界定的區域
被 Python 視為多行註解
'''
a = "一個字串"
a = 24
a = 24.5
print(a)
b = print(a, a, a, sep='*') //b沒有被賦予意義，所以為None
print(b)</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
triangle 三角形
squre 正方形
rectangle 長方形
'''

n = 5  # 總共的行數
 
for i in range(n):  # 對於每一行
    # 印出空格
    print(' ' * (n - i - 1), end='')  # 在每行前面印出空格
    # 印出星號
    print('*' * (2 * i + 1))  # 每行印出 2*i + 1 個星號</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#help(range)
for i in range(1, 6, 2):
    print(i, end="")
    print()</pre>
<p><a href="https://gist.github.com/41071205/0889882669e572480fc210acd9764b95">https://gist.github.com/41071205/0889882669e572480fc210acd9764b95</a></p>
<h4></h4>
<h3>W6</h3>
<ol>
<li>下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (可攜程式環境)</li>
<li>下載<span> </span><a href="https://mde.tw/cp2024/downloads/zmq_remote_api_ex_cube_triangle.7z">zmq_remote_api_ex_cube_triangle.7z</a> (利用 Python 控制模擬場景中的物件)</li>
<li>進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式,<span> </span><a href="https://github.com/CoppeliaRobotics">原始碼</a>)</li>
<li>啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器</li>
<li>執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出:</li>
<li>netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050<br/>netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050</li>
<li>開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream</li>
<li>利用 SciTE 開啟 put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式</li>
<li>使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景</li>
</ol>
<p></p>
<p><img alt="" src="/images/index.html"/><img alt="" height="286" src="/images/螢幕擷取畫面 2024-10-16 113321.png" width="535"/><img alt="" height="287" src="/images/螢幕擷取畫面 2024-10-16 113820.png" width="532"/><img alt="" height="495" src="/images/螢幕擷取畫面 2024-10-16 113546.png" width="308"/></p>
<h3>w16_exam2</h3>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/08c4455eeaa52bc7ad01c933980db3e8/raw/890db2227ee4bb4e3c13fb42d271fdf901195078/maze%25202">anchor</a></p>
<p></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

canvas = html.CANVAS(width=2000, height=2000)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")

# 简化的绘制直线函数
def draw_line(x1, y1, x2, y2, line_width=2, stroke_style="black"):
    ctx.lineWidth = line_width
    ctx.strokeStyle = stroke_style
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.stroke()

# 绘制第一部分的线条
draw_line(12, 5, 88, 5)
draw_line(12, 5, 12, 95)

# 绘制短线条（红色）
draw_line(12, 5, 12, 6, line_width=5, stroke_style="red")
draw_line(12, 5, 13, 5, line_width=5, stroke_style="red")

# 绘制文本
ctx.font = "20px Arial"
ctx.fillStyle = "red"
ctx.fillText("(12,5)", 20, 35)

# 绘制蓝色多条线条
draw_line(130, 130, 170, 130, stroke_style="blue")
draw_line(190, 130, 230, 130, stroke_style="blue")
draw_line(230, 130, 230, 230, stroke_style="blue")
draw_line(230, 230, 190, 230, stroke_style="blue")
draw_line(170, 230, 130, 230, stroke_style="blue")
draw_line(130, 230, 130, 130, stroke_style="blue")

# 绘制矩形内部的线条
draw_line(150, 150, 210, 150, stroke_style="blue")
draw_line(210, 150, 210, 170, stroke_style="blue")
draw_line(170, 150, 170, 170, stroke_style="blue")
draw_line(170, 170, 130, 170, stroke_style="blue")
draw_line(190, 170, 190, 190, stroke_style="blue")
draw_line(190, 190, 210, 190, stroke_style="blue")
draw_line(210, 190, 210, 230, stroke_style="blue")
draw_line(170, 170, 150, 170, stroke_style="blue")
draw_line(150, 210, 150, 190, stroke_style="blue")
draw_line(150, 190, 190, 190, stroke_style="blue")
draw_line(170, 230, 170, 210, stroke_style="blue")
draw_line(170, 210, 190, 210, stroke_style="blue")
</script>
</p><h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam3</h3>
<p><a href="https://mdecp2024.github.io/hw-41071205/content/Brython?src=https://gist.githubusercontent.com/41071205/0ac6f938b88a3e85672e7eb540e7d16b/raw/cea46e49fd395e59177c628a16f9e9ef325ba826/maze%25203">anchor</a></p>
<p></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

canvas = html.CANVAS(width=2000, height=2000)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")

# 简化的绘制直线函数
def draw_line(x1, y1, x2, y2, line_width=2, stroke_style="black"):
    ctx.lineWidth = line_width
    ctx.strokeStyle = stroke_style
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.stroke()

# 绘制第一部分的线条
draw_line(12, 5, 88, 5)
draw_line(12, 5, 12, 95)

# 绘制短线条（红色）
draw_line(12, 5, 12, 6, line_width=5, stroke_style="red")
draw_line(12, 5, 13, 5, line_width=5, stroke_style="red")

# 绘制文本
ctx.font = "20px Arial"
ctx.fillStyle = "red"
ctx.fillText("(12,5)", 20, 35)

# 绘制蓝色多条线条
draw_line(130, 130, 170, 130, stroke_style="black")
draw_line(190, 130, 230, 130, stroke_style="black")
draw_line(230, 130, 230, 230, stroke_style="black")
draw_line(230, 230, 190, 230, stroke_style="black")
draw_line(170, 230, 130, 230, stroke_style="black")
draw_line(130, 230, 130, 130, stroke_style="black")

# 绘制矩形内部的线条
draw_line(150, 150, 210, 150, stroke_style="black")
draw_line(210, 150, 210, 170, stroke_style="black")
draw_line(170, 150, 170, 170, stroke_style="black")
draw_line(170, 170, 130, 170, stroke_style="black")
draw_line(190, 170, 190, 190, stroke_style="black")
draw_line(190, 190, 210, 190, stroke_style="black")
draw_line(210, 190, 210, 230, stroke_style="black")
draw_line(170, 170, 150, 170, stroke_style="black")
draw_line(150, 210, 150, 190, stroke_style="black")
draw_line(150, 190, 190, 190, stroke_style="black")
draw_line(170, 230, 170, 210, stroke_style="black")
draw_line(170, 210, 190, 210, stroke_style="black")

# 绘制文本
ctx.font = "12px Arial"
ctx.fillStyle = "red"
ctx.fillText("入口", 170, 110)
ctx.fillText("出口", 170, 260)

draw_line(180, 130, 180, 140, stroke_style="red")
draw_line(180, 140, 220, 140, stroke_style="red")
draw_line(220, 140, 220, 180, stroke_style="red")
draw_line(220, 180, 200, 180, stroke_style="red")
draw_line(200, 180, 200, 160, stroke_style="red")
draw_line(200, 160, 180, 160, stroke_style="red")
draw_line(180, 160, 180, 180, stroke_style="red")
draw_line(180, 180, 140, 180, stroke_style="red")
draw_line(140, 180, 140, 220, stroke_style="red")
draw_line(140, 220, 160, 220, stroke_style="red")
draw_line(160, 220, 160, 200, stroke_style="red")
draw_line(160, 200, 200, 200, stroke_style="red")
draw_line(200, 200, 200, 220, stroke_style="red")
draw_line(200, 220, 180, 220, stroke_style="red")
draw_line(180, 220, 180, 230, stroke_style="red")
</script>
</p><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p><h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>